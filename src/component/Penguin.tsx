/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 scene.gltf 
Author: SunnyBuns (https://sketchfab.com/SunnyBuns)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/penguin-plush-228fddb7362f42e2a349b84cbe8191b4
Title: Penguin plush
*/
import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GroupProps, useFrame } from "@react-three/fiber";
import { useEffect, useRef, useState } from "react";
import { GLTF } from "three-stdlib";

// https://github.com/pmndrs/drei/issues/469
export type DreiGLTF = GLTF & {
  nodes: Record<string, THREE.Mesh>;
  materials: Record<string, THREE.MeshStandardMaterial>;
};

function Penguin(props: GroupProps) {
  const meshRef = useRef<THREE.Group>(null!);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const { nodes, materials } = useGLTF("/scene.gltf") as DreiGLTF;

  const sensitivity = 1000;

  useEffect(() => {
    const handleMouseMove = (event: MouseEvent) => {
      setMousePosition({
        x: event.clientY / sensitivity,
        y: event.clientX / sensitivity,
      });
    };

    window.addEventListener("mousemove", handleMouseMove);

    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
    };
  }, []);

  useFrame((state, delta) => {
    meshRef.current.rotation.x = mousePosition.x;
    meshRef.current.rotation.y = mousePosition.y - 1000;
  });

  return (
    <group ref={meshRef} {...props} dispose={null}>
      <group scale={0.02}>
        <mesh
          geometry={nodes["Box001_02_-_Default_0"].geometry}
          material={materials["02_-_Default"]}
          position={[0, -50, 0]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={2.54}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/scene.gltf");

export default Penguin;
